mutate(YearMonth = yearmonth(Date)) |>
filter(between(substr(Date, 5, 8), "2017", "2021")) |>
select(YearMonth, Price)
df.exports.22 <- df.exports |>
mutate(YearMonth = yearmonth(Date),
Exports = U.S..Natural.Gas.Exports..MMcf.) |>
filter(between(substr(Date, 5, 8), "1997", "2022"))
df.exports <- df.exports.22 |>
filter(between(substr(Date, 5, 8), "2017", "2021"))  |>
select(YearMonth, Exports)
df.temp <- df.temp |>
filter(between(substr(DATE, 1, 4), "2017", "2021")) |>
mutate(YearMonth = yearmonth(DATE)) |>
group_by(YearMonth) |>
aggregate(TAVG ~ YearMonth, mean) |>
mutate(Temp = TAVG)
df.RD <- df.RD |>
filter(between(substr(TIME, 1, 4), "2017", "2021")) |>
mutate(Year = substr(TIME, 1, 4),
Month = substr(TIME, 5, 6),
YearMonth = yearmonth(paste(Year, Month)),
Tech = Value) |>
select(c(YearMonth, Tech)) |>
arrange(YearMonth)
df.IND <- df.IND |>
filter(between(substr(TIME, 1, 4), "2017", "2021")) |>
mutate(YearMonth = yearmonth(TIME),
Industry = Value) |>
select(c(YearMonth, Industry)) |>
arrange(YearMonth)
df <- cbind(df.gas, df.price, df.exports, df.temp, df.RD, df.IND) |>
select(-c(3,5,7,8,10,12))
myts <- df |>
as_tsibble(index = YearMonth,
key = c(Consumption, Price, Exports, Temp, Tech, Industry)) |>
arrange(YearMonth)
lambda <- BoxCox.lambda(myts$Consumption, method = c("guerrero"))
myts$Consumption <- myts$Consumption^lambda
myts <- as_tsibble(myts, index = YearMonth)
# Plotting the time-series
ggplot(myts, aes(x = YearMonth, y = Consumption)) +
geom_point(aes(y = Consumption)) +
geom_line(aes(y = Consumption)) +
labs(title = "Time-Series of Natural Gas Consumption",
subtitle = "in USA (2017-2021)",
x = "Month",
y = "Transformed Cubic Feet")
# Exporting the plot
ggsave(filename = "Graphics/TS_transformed.pdf", width = 12, height = 7)
# Train
train <- as_tsibble(myts[1:48,],
index = YearMonth,
key = c(Consumption, Price, Temp, Tech, Industry))
train$Consumption <- train$Consumption*1
train <- as_tsibble(train, index = YearMonth)
# Test
test <- as_tsibble(myts[49:60,],
index = YearMonth,
key = c(Consumption, Price, Temp, Tech, Industry))
test$Consumption <- test$Consumption*1
test <- as_tsibble(test, index = YearMonth)
fit <- train |> model(
LM = TSLM(Consumption ~ Price + Temp + Tech + Industry + Exports + season()),
ETS = ETS(Consumption),
ARIMA = ARIMA(Consumption)) |>
mutate(ENSEMBLE = (LM + ETS + ARIMA)/3)
fit
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# Exporting the plot
ggsave(filename = "Graphics/Residuals.pdf", width = 12, height = 7)
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Exporting the plot
ggsave(filename = "Graphics/ACF.pdf", width = 12, height = 7)
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24)
fit |> select(LM) |> report()
# LM residual plots
LM_resid <- fit |> select(LM) |> gg_tsresiduals()
ggsave(LM_resid, filename = "Graphics/LM_resid.pdf", width = 12, height = 7)
LM_resid
# ETS residual plots
ETS_resid <- fit |> select(ETS) |> gg_tsresiduals()
ggsave(ETS_resid, filename = "Graphics/ETS_resid.pdf", width = 12, height = 7)
ETS_resid
# ARIMA residual plots
ARIMA_resid <- fit |> select(ARIMA) |> gg_tsresiduals()
ggsave(ARIMA_resid, filename = "Graphics/ARIMA_resid.pdf", width = 12, height = 7)
ARIMA_resid
# ENSEMBLE residual plots
ENSEMBLE_resid <- fit |> select(ENSEMBLE) |> gg_tsresiduals()
ggsave(ENSEMBLE_resid, filename = "Graphics/ENSEMBLE_resid.pdf", width = 12, height = 7)
ENSEMBLE_resid
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24)
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# Exporting the plot
ggsave(filename = "Graphics/Residuals.pdf", width = 12, height = 7)
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Exporting the plot
ggsave(filename = "Graphics/ACF.pdf", width = 12, height = 7)
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24)
fit <- train |> model(
LM = TSLM(Consumption ~ Price + Temp + Tech + Industry + Exports - season()),
ETS = ETS(Consumption),
ARIMA = ARIMA(Consumption)) |>
mutate(ENSEMBLE = (LM + ETS + ARIMA)/3)
fit
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# Exporting the plot
ggsave(filename = "Graphics/Residuals.pdf", width = 12, height = 7)
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Exporting the plot
ggsave(filename = "Graphics/ACF.pdf", width = 12, height = 7)
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24)
# Generating forecast plot
fit |> select(c(LM)) |> forecast(new_data = test) |> autoplot(train) +
ylim(c(0.0002, 0.0006)) +
autolayer(test) +
labs(title = "Regression Model Forecast",
x = "Month",
y = "Transformed Natural Gas Consumption")
# Exporting the plot
ggsave(filename = "Graphics/LM_fit.pdf", width = 12, height = 7)
fit <- train |> model(
LM = TSLM(log(Consumption) ~ Price + Temp + Tech + Industry + Exports + season()),
ETS = ETS(log(Consumption)),
ARIMA = ARIMA(log(Consumption))) |>
mutate(ENSEMBLE = (LM + ETS + ARIMA)/3)
fit
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# Exporting the plot
ggsave(filename = "Graphics/Residuals.pdf", width = 12, height = 7)
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Exporting the plot
ggsave(filename = "Graphics/ACF.pdf", width = 12, height = 7)
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24)
fit <- train |> model(
LM = TSLM(Consumption ~ Price + Temp + Tech + Industry + Exports),
ETS = ETS(Consumption),
ARIMA = ARIMA(Consumption)) |>
mutate(ENSEMBLE = (LM + ETS + ARIMA)/3)
fit
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# Exporting the plot
ggsave(filename = "Graphics/Residuals.pdf", width = 12, height = 7)
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Exporting the plot
ggsave(filename = "Graphics/ACF.pdf", width = 12, height = 7)
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24)
fit <- train |> model(
LM = TSLM(Consumption ~ Price + Temp + Tech + Industry + Exports + trend()),
ETS = ETS(Consumption),
ARIMA = ARIMA(Consumption)) |>
mutate(ENSEMBLE = (LM + ETS + ARIMA)/3)
fit
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# Exporting the plot
ggsave(filename = "Graphics/Residuals.pdf", width = 12, height = 7)
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Exporting the plot
ggsave(filename = "Graphics/ACF.pdf", width = 12, height = 7)
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24)
fit <- train |> model(
LM = TSLM(Consumption ~ Price + Temp + Tech + Industry + Exports + trend() + season()),
ETS = ETS(Consumption),
ARIMA = ARIMA(Consumption)) |>
mutate(ENSEMBLE = (LM + ETS + ARIMA)/3)
fit
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# Exporting the plot
ggsave(filename = "Graphics/Residuals.pdf", width = 12, height = 7)
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Exporting the plot
ggsave(filename = "Graphics/ACF.pdf", width = 12, height = 7)
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24)
View(myts)
myts |>
features(Consumption, unitroot_kpss)
# Unit root test
myts |> features(Consumption, unitroot_kpss)
fit <- train |> model(
LM = TSLM(Consumption ~
Price + Temp + Tech + Industry + Exports + trend() + season()),
ETS = ETS(Consumption),
ARIMA = ARIMA(Consumption)) |>
mutate(ENSEMBLE = (LM + ETS + ARIMA)/3)
fit
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# Exporting the plot
ggsave(filename = "Graphics/Residuals.pdf", width = 12, height = 7)
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Exporting the plot
ggsave(filename = "Graphics/ACF.pdf", width = 12, height = 7)
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24)
# Generating forecast plot
fit |> select(c(LM)) |> forecast(new_data = test) |> autoplot(train) +
ylim(c(0.0002, 0.0006)) +
autolayer(test) +
labs(title = "Regression Model Forecast",
x = "Month",
y = "Transformed Natural Gas Consumption")
# Exporting the plot
ggsave(filename = "Graphics/LM_fit.pdf", width = 12, height = 7)
# Generating forecast plot
fit |> select(c(ENSEMBLE)) |> forecast(new_data = test) |> autoplot(train) +
ylim(c(0.0002, 0.0006)) +
autolayer(test) +
labs(title = "Aggregate Model Forecast",
x = "Month",
y = "Transformed Natural Gas Consumption")
# Exporting the plot
ggsave(filename = "Graphics/ENSEMBLE_fit.pdf", width = 12, height = 7)
myts <- df |>
as_tsibble(index = YearMonth,
key = c(Consumption, Price, Exports, Temp, Tech, Industry)) |>
arrange(YearMonth)
# Adding seasonally adjusted values
myts.decomp <- myts |>
model(STL(Consumption)) |>
components()
myts <- df |>
as_tsibble(index = YearMonth,
key = c(Consumption, Price, Exports, Temp, Tech, Industry)) |>
arrange(YearMonth)
myts$Consumption <- myts$Consumption^1
myts <- as_tsibble(myts, index = YearMonth)
# Adding seasonally adjusted values
myts.decomp <- myts |>
model(STL(Consumption)) |>
components()
myts["Consumption_Adjusted"] <- myts.decomp$season_adjust
# Plotting the consumption time-series (2017 - 2021)
ggplot(myts, aes(x = YearMonth, y = Consumption_Adjusted)) +
geom_point(aes(y = Consumption_Adjusted)) +
geom_line(aes(y = Consumption_Adjusted)) +
labs(title = "Time-Series of Natural Gas Consumption",
subtitle = "in USA (2017-2021)",
x = "Month",
y = "Billion Cubic Feet")
lambda <- BoxCox.lambda(myts$Consumption_Adjusted, method = c("guerrero"))
myts$Consumption_Adjusted <- myts$Consumption_Adjusted^lambda
myts <- as_tsibble(myts, index = YearMonth)
# Plotting the time-series
ggplot(myts, aes(x = YearMonth, y = Consumption_Adjusted)) +
geom_point(aes(y = Consumption_Adjusted)) +
geom_line(aes(y = Consumption_Adjusted)) +
labs(title = "Time-Series of Natural Gas Consumption",
subtitle = "in USA (2017-2021)",
x = "Month",
y = "Transformed Cubic Feet")
# Exporting the plot
ggsave(filename = "Graphics/TS_transformed.pdf", width = 12, height = 7)
# Unit root test
myts |> features(Consumption, unitroot_kpss)
# Unit root test
myts |> features(Consumption_Adjusted, unitroot_kpss)
fit <- train |> model(
LM = TSLM(Consumption_Adjusted ~
Price + Temp + Tech + Industry + Exports + trend() + season()),
ETS = ETS(Consumption_Adjusted),
ARIMA = ARIMA(Consumption_Adjusted)) |>
mutate(ENSEMBLE = (LM + ETS + ARIMA)/3)
myts <- df |>
as_tsibble(index = YearMonth,
key = c(Consumption, Price, Exports, Temp, Tech, Industry)) |>
arrange(YearMonth)
# Plotting the consumption time-series (2017 - 2021)
ggplot(myts, aes(x = YearMonth, y = Consumption)) +
geom_point(aes(y = Consumption)) +
geom_line(aes(y = Consumption)) +
labs(title = "Time-Series of Natural Gas Consumption",
subtitle = "in USA (2017-2021)",
x = "Month",
y = "Billion Cubic Feet")
# Exporting the plot
ggsave(filename = "Graphics/TS_contemp.pdf", width = 12)
# Unit root test
myts |> features(Consumption, unitroot_kpss)
View(myts)
# Unit root test
myts |> features(Consumption, unitroot_kpss)
myts <- df |>
as_tsibble(index = YearMonth,
key = c(Consumption, Price, Exports, Temp, Tech, Industry)) |>
arrange(YearMonth)
lambda <- BoxCox.lambda(myts$Consumption, method = c("guerrero"))
myts$Consumption <- myts$Consumption^lambda
myts <- as_tsibble(myts, index = YearMonth)
# Plotting the time-series
ggplot(myts, aes(x = YearMonth, y = Consumption)) +
geom_point(aes(y = Consumption)) +
geom_line(aes(y = Consumption)) +
labs(title = "Time-Series of Natural Gas Consumption",
subtitle = "in USA (2017-2021)",
x = "Month",
y = "Transformed Cubic Feet")
# Exporting the plot
ggsave(filename = "Graphics/TS_transformed.pdf", width = 12, height = 7)
# Unit root test
myts |> features(Consumption, unitroot_kpss)
# Unit root test
myts |> features(Consumption, unitroot_kpss)
fit <- train |> model(
LM = TSLM(Consumption ~
Price + Temp + Tech + Industry + Exports + trend() + season()),
ETS = ETS(Consumption),
ARIMA = ARIMA(Consumption)) |>
mutate(ENSEMBLE = (LM + ETS + ARIMA)/3)
fit
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# Exporting the plot
ggsave(filename = "Graphics/Residuals.pdf", width = 12, height = 7)
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Exporting the plot
ggsave(filename = "Graphics/ACF.pdf", width = 12, height = 7)
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24)
# Generating forecast plot
fit |> select(c(LM)) |> forecast(new_data = test) |> autoplot(train) +
ylim(c(0.0002, 0.0006)) +
autolayer(test) +
labs(title = "Regression Model Forecast",
x = "Month",
y = "Transformed Natural Gas Consumption")
# Exporting the plot
ggsave(filename = "Graphics/LM_fit.pdf", width = 12, height = 7)
# Generating forecast plot
fit |> select(c(ENSEMBLE)) |> forecast(new_data = test) |> autoplot(train) +
ylim(c(0.0002, 0.0006)) +
autolayer(test) +
labs(title = "Aggregate Model Forecast",
x = "Month",
y = "Transformed Natural Gas Consumption")
# Exporting the plot
ggsave(filename = "Graphics/ENSEMBLE_fit.pdf", width = 12, height = 7)
View(df)
# Train
train <- as_tsibble(myts[1:48,],
index = YearMonth,
key = c(Consumption, Price, Temp, Tech, Industry))
train$Consumption <- train$Consumption*1
train <- as_tsibble(train, index = YearMonth)
# Test
test <- as_tsibble(myts[49:60,],
index = YearMonth,
key = c(Consumption, Price, Temp, Tech, Industry))
test$Consumption <- test$Consumption*1
test <- as_tsibble(test, index = YearMonth)
# Unit root test
myts |> features(Consumption, unitroot_kpss)
fit <- train |> model(
LM = TSLM(Consumption ~
Price + Temp + Tech + Industry + Exports + trend() + season()),
ETS = ETS(Consumption),
ARIMA = ARIMA(Consumption)) |>
mutate(ENSEMBLE = (LM + ETS + ARIMA)/3)
fit
# Generating the forecast table (fable)
myf <- fit |> select(-c(LM, ENSEMBLE)) |> forecast(h = 12)
myf.lm <- fit |> select(c(LM)) |> forecast(new_data = test)
myf.agg <- fit |> select(c(ENSEMBLE)) |> forecast(new_data = test)
myf <- rbind(myf, myf.lm, myf.agg)
# Generating a point forecast accuracy table
accuracy(myf, test) |>
mutate(Model = .model) |>
select(c(Model, MAE, RMSE, MASE, MAPE)) |>
arrange(MAPE)
# Generating the forecast table (fable)
myf <- fit |> select(-c(LM, ENSEMBLE)) |> forecast(h = 12)
myf.lm <- fit |> select(c(LM)) |> forecast(new_data = test)
myf.agg <- fit |> select(c(ENSEMBLE)) |> forecast(new_data = test)
myf <- rbind(myf, myf.lm, myf.agg)
# Generating a point forecast accuracy table
accuracy(myf, test) |>
mutate(Model = .model) |>
select(c(Model, MAE, RMSE, MAPE)) |>
arrange(MAPE)
myf |> accuracy(test, list(crps =CRPS)) |>
mutate(Model = .model,
CRPS = crps) |>
select(c(Model, CRPS)) |>
arrange(CRPS)
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
library(fpp3)
library(plotly)
library(car)
library(forecast)
library(ggthemes)
library(tibbletime)
library(distributional)
theme_set(theme_solarized())
# Importing data
df.gas <- read.csv("Data/natural_gas.csv")
df.henryhub <- read.csv("Data/natgas_price.csv")
df.exports <- read.csv("Data/gas_exports.csv")
df.temp <- read.csv("Data/temp_monthly.csv")
df.RD <- read.csv("Data/GERD%ofGDP.csv")
df.IND <- read.csv("Data/IndustrialProduction.csv")
myts.gas <- df.gas |>
filter(Description == "Natural Gas Consumption",
substr(YYYYMM, 5, 6) != 13,) |>
mutate(Year = substr(YYYYMM, 1, 4),
Month = substr(YYYYMM, 5, 6),
YearMonth = yearmonth(paste(Year, Month)),
Consumption = as.numeric(Value)) |>
as_tsibble(index = YearMonth,
key = Consumption) |>
select(YearMonth, Consumption)
myts.gas$Consumption <- myts.gas$Consumption^1
myts.gas <- as_tsibble(myts.gas, index = YearMonth)
lambda <- BoxCox.lambda(myts$Consumption, method = c("guerrero"))
